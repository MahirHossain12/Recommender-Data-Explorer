# -*- coding: utf-8 -*-
"""Course Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1702duGZRrtAvhbvxroesEH86HG9MZjJR
"""

import pandas as pd
import numpy as np
import neattext.functions as nfx
import seaborn as sn

from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity,linear_kernel

df = pd.read_csv('udemy_courses.csv')
df.head()

dir(nfx)

df['course_title'].iloc[1:5]

df['Clean_title'] = df['course_title'].apply(nfx.remove_stopwords)

df['Clean_title'] = df['Clean_title'].apply(nfx.remove_special_characters)

df['Clean_title'].iloc[1:5]

countvect = CountVectorizer()

cv_mat = countvect.fit_transform(df['Clean_title'])

cv_mat

cv_mat.todense()

df_cv_words = pd.DataFrame(cv_mat.todense(),columns=countvect.get_feature_names())

df_cv_words

cosine_sim_mat = cosine_similarity(cv_mat)

cosine_sim_mat

course_index = pd.Series(df.index,index = df['course_title']).drop_duplicates()

course_index

temp = df[df['course_title'].str.contains('Python')]
temp.head()

top6 = temp.sort_values(by = 'num_subscribers',ascending=False).head(6)

top6

index = course_index['How To Maximize Your Profits Trading Options']

scores = list(enumerate(cosine_sim_mat[index]))
scores

sorted_score = sorted(scores,key = lambda x:x[1],reverse=True)
sorted_score

sorted_indices = [i[0] for i in sorted_score[1:]]

sorted_values = [i[1] for i in sorted_score[1:]]

sorted_values

recommended_result_df = df.iloc[sorted_indices]

recommended_result_df

recommended_result_df['Similarity_Score'] = np.array(sorted_values)

recommended_result_df

use_df = recommended_result_df[['Clean_title','Similarity_Score']]
use_df

def recommend_course(title,numrec = 10):

    course_index = pd.Series(
        df.index, index=df['course_title']).drop_duplicates()

    index = course_index[title]

    scores = list(enumerate(cosine_sim_mat [index]))

    sorted_scores = sorted(scores, key=lambda x: x[1], reverse=True)

    selected_course_index = [i[0] for i in sorted_scores[1:]]

    selected_course_score = [i[1] for i in sorted_scores[1:]]

    rec_df = df.iloc[selected_course_index]

    rec_df['Similarity_Score'] = selected_course_score

    final_recommended_courses = rec_df[[
        'course_title', 'Similarity_Score', 'url', 'price', 'num_subscribers']]

    return final_recommended_courses.head(numrec)




ans = recommend_course('Trading Options Basics',20)

ans

ans.shape

ans.columns

df.head()

df.to_csv('UdemyCleanedTitle.csv',index = None)

